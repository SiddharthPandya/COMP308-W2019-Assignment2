<% include ./partials/header.ejs %>

<!-- File: projects.ejs 
     Siddharth Pandya
     300915041
     2019-02-16 -->

<div class="container">

  <div class="jumbotron">

    <h1 class="text-center"><b><%= title %> Overview</b></h1><br>

    <!-- Carousel is used for display project images and details -->

    <div class="bd-example">
      <div id="carouselExampleCaptions" class="carousel slide" data-ride="carousel">
        <ol class="carousel-indicators">
          <li data-target="#carouselExampleCaptions" data-slide-to="0" class="active"></li>
          <li data-target="#carouselExampleCaptions" data-slide-to="1"></li>
          <li data-target="#carouselExampleCaptions" data-slide-to="2"></li>
        </ol>
        <div class="carousel-inner">
          <div class="carousel-item active">
            <img src="./Assets/images/PCK.JPG" class="d-block w-100" alt="...">
            <!-- Alert class used for title of each image slide -->
            <div class="alert alert-dark text-center">
              <h5>Project 1 - Restaurant Website</h5>
            </div>
          </div>
          <div class="carousel-item">
            <img src="./Assets/images/ReceipeAPI.JPG" class="d-block w-100" alt="...">
            <div class="alert alert-dark text-center">
              <h5>Project 2 - Receipe API (System Architecture)</h5>
            </div>
          </div>
          <div class="carousel-item">
            <img src="./Assets/images/StudRent.JPG" class="d-block w-100" alt="...">
            <div class="alert alert-dark text-center">
              <h5>Project 3 - Student Rental Application (ERD)</h5>
            </div>
          </div>
        </div>
        <a class="carousel-control-prev" href="#carouselExampleCaptions" role="button" data-slide="prev">
          <span class="carousel-control-prev-icon" aria-hidden="true"></span>
          <span class="sr-only">Previous</span>
        </a>
        <a class="carousel-control-next" href="#carouselExampleCaptions" role="button" data-slide="next">
          <span class="carousel-control-next-icon" aria-hidden="true"></span>
          <span class="sr-only">Next</span>
        </a>
      </div>
    </div><br>

    <h3 class="text-center"><b>Project Details</b></h3><br>

    <!-- Card component is used for collapse behaviour to create an accordion -->

    <div class="accordion" id="accordionExample">
      <div class="card">
        <div class="card-header" id="headingOne">
          <h2 class="mb-0">
          <!-- Classes for each heading item is changed -->
            <button class="btn btn-success" type="button" data-toggle="collapse" data-target="#collapseOne"
              aria-expanded="true" aria-controls="collapseOne">
              Restaurant Website
            </button>
          </h2>
        </div>

        <div id="collapseOne" class="collapse show" aria-labelledby="headingOne" data-parent="#accordionExample">
          <div class="card-body">
            <p>Restaurant website was successfully created using ASP.Net and SQL Server Management Studio</p>
            <p><b>Features and Functionality of the website:</b></p>
            <ul>
              <li>User must have an account and needs to login in order to gain full access to the website. New users
                needs to register first.</li>
              <li>Information of registered users was stored in a database table in SQL Server Management Studio.</li>
              <li>Masterpage was created for consistency in UI across the website.</li>
              <li>For each type of menu item, a separate table was created in database to store their information.</li>
              <li>Four types of menu items were included - Appetizers, Main Course, Drinks & Dessert.</li>
              <li>For employees, there was a separate login option and UI</li>
              <li>Following pages were created:
                <ul>
                  <li><b>Home:</b> Displayed a welcome message for the users</li>
                  <li><b>Menu:</b> Retrieved information from database and displayed menu item information using grid
                    view and details view.</li>
                  <li><b>Order:</b> For order placement, user must have to select atleast one item. This would redirect
                    them to payments and order confirmation page</li>
                  <li><b>Setup:</b> Two types of themes were implemented - Light and Dark</li>
                  <li><b>Search:</b> User could search food items based on chef selection and food item</li>
                  <li><b>Peronsal Info:</b> It would display personal information of user that was collected during
                    registration. User can edit this information which would also make changes in the database.</li>
                  <li><b>Feedback:</b> Feedback form for users to provide suggestion or feedback.</li>
                  <li><b>About:</b> Video regarding restaurant</li>
                  <li><b>Employee Login:</b> Empployee could see the list of all the registered users. They could even
                    delete a specific user account.</li>
                </ul>
              </li>
            </ul>
          </div>
        </div>
      </div>
      <div class="card">
        <div class="card-header" id="headingTwo">
          <h2 class="mb-0">
            <button class="btn btn-danger collapsed" type="button" data-toggle="collapse" data-target="#collapseTwo"
              aria-expanded="false" aria-controls="collapseTwo">
              Receipe API
            </button>
          </h2>
        </div>
        <div id="collapseTwo" class="collapse" aria-labelledby="headingTwo" data-parent="#accordionExample">
          <div class="card-body">
            <p>Developed an API (Web API) and a client (MVC) to consume that API and it was published on
              AWS Elastic Beanstalks. Amazon Relational Database Service (RDS) was used for storing data. Following is
              the detailed explanation of each component:</p>
            <ul>
              <li><b>Client:</b> Created one client which is a MVC Web application using
                ASP.Net. This client will consume our API and through interface user will be able
                to perform Create, Read, Update and Delete. These changes will be saved in our
                database. As our client is MVC app, we have model and views. Controller acts as
                a bridge between these two. This client consumes API through URI mentioned in GlobaVariable.cs class. We
                have provided both the links – link to AWS Elastic
                Beanstalk and APIGEE. Further path is provided in ReceipeController. We have
                2 views under Receipe folder (in Views) – index and AddorEdit. Index view
                displays the list through GetReceipes while AddorEdit view is used to Add or
                Update a record. Record is deleted by the button provided on Index view.
              </li>
              <li><b>APIGEE:</b> We have used APIGEE to support our client. We have created API
                proxy, App and Product in APIGEE. In our API Proxy we have add Verify API key
                1 security group.
              </li>
              <li><b>ReceipeAPI:</b> For our API, we created our models through Scaffold-DbContext
                code. We added our connection string in appsetting.json file and code of swagger
                in startup.cs. There is a Repository which includes a class and an interface. Class
                implements the interface and its method which allows Client to perform CRUD
                operations. ReceipeController contains HttpGet, HttpPost, HttpPut and
                HttpDelete.
              </li>
              <li><b>ReceipeDb:</b> ReceipeDb is the table named created in Receipe database. We
                have used AWS RDS to form a connection. Database is created in SQL Server
                Management Studio.
              </li>
            </ul>
          </div>
        </div>
      </div>
      <div class="card">
        <div class="card-header" id="headingThree">
          <h2 class="mb-0">
            <button class="btn btn-info collapsed" type="button" data-toggle="collapse" data-target="#collapseThree"
              aria-expanded="false" aria-controls="collapseThree">
              Object Oriented Analysis & Design for Student Rental Application
            </button>
          </h2>
        </div>
        <div id="collapseThree" class="collapse" aria-labelledby="headingThree" data-parent="#accordionExample">
          <div class="card-body">
            <p>StudRent - Application for new students to search out for rental places. Following things were included
              in the documentation:</p>
            <ul>
              <li>Vision document containing brief explanation of Problem Discription, System Capabilites and Business
                Benefits</li>
              <li>Workflows and Use Case Diagram for each subsystem</li>
              <li>Detailed Use Case Description and User Stories</li>
              <li>Domain Class Diagram, Design Class Diagram, Sequence Diagram and State Machine Diagram</li>
              <li>Entity Relationship Diagram and Deployment Diagram</li>
              <li>Mock-up User Interface was created</li>
              <li>Project Planning was done using Gantt Chart</li>
            </ul>
          </div>
        </div>
      </div>
    </div>

  </div>

</div>

<% include ./partials/footer.ejs %>